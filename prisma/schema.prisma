// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  username      String    @unique
  description   String?
  email         String
  password      String
  image         String?
  emailVerified DateTime?
  location      String?

  group             Group[]
  groups            GroupUser[]
  invitations       InvitationList[]
  groupMessageSeen  GroupMessageSeen[]
  groupMessage      GroupMessage[]
  groupEvent        GroupEvent[]
  userResponseEvent UserResponseEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, username, id])
}

model verificationToken {
  id     String   @id @default(cuid())
  email  String
  token  String   @unique
  expire DateTime

  @@unique([email, token])
}

model Group {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  location       String?
  postalCode     Int[]
  image          String?
  moderatorId    String
  createdAt      DateTime           @default(now())
  groupType      GroupType          @default(open)
  sportPraticed  SportPracticed[]   @default([])
  users          GroupUser[]
  invitationList InvitationList[]
  conversation   GroupConversation?
  groupEvent     GroupEvent[]

  user User @relation(fields: [moderatorId], references: [id])
}

model GroupEvent {
  id            String   @id @default(cuid())
  groupId       String
  name          String
  creatorId     String
  location      String
  postalCode    Int
  departureDate DateTime
  startAt       DateTime
  description   String
  createdAt     DateTime @default(now())

  response      UserResponseEvent[]
  sportPraticed SportPracticed[]

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [creatorId], references: [id])
}

model UserResponseEvent {
  groupEventId String
  userId       String
  response     ResponseType @default(PENDING)

  groupEvent GroupEvent @relation(fields: [groupEventId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id])

  @@id([groupEventId, userId])
}

model GroupConversation {
  id            String         @id @default(cuid())
  groupId       String         @unique
  lastMessageAt DateTime       @default(now())
  messages      GroupMessage[]

  group Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupMessage {
  id             String   @id @default(cuid())
  message        String
  createdAt      DateTime @default(now())
  conversationId String
  seensIds       String[]
  userId         String

  user         User               @relation(fields: [userId], references: [id])
  seen         GroupMessageSeen[]
  conversation GroupConversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model GroupMessageSeen {
  userId    String
  messageId String

  user    User         @relation(fields: [userId], references: [id])
  message GroupMessage @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}

model InvitationList {
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model GroupUser {
  userId   String   @unique
  groupId  String
  joinedAt DateTime @default(now())
  role     Role     @default(member)

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

enum Role {
  admin
  member
}

enum SportPracticed {
  road_running
  trail_running
  walking
  road_cycling
  gravel_cycling
  mountain_biking
}

enum GroupType {
  close
  open
  invitation
}

enum ResponseType {
  PENDING
  PARTICIPANT
  ABSENT
}
